// backend/services/campayService.js
const axios = require('axios');

const CAMPAY_BASE_URL = process.env.CAMPAY_BASE_URL || 'https://demo.campay.net/api';
const CAMPAY_USERNAME = process.env.CAMPAY_USERNAME;
const CAMPAY_PASSWORD = process.env.CAMPAY_PASSWORD;

class CamPayService {
  constructor() {
    this.token = null;
    this.tokenExpiry = null;
    
    console.log('üîß ========================================');
    console.log('üîß CAMPAY SERVICE INITIALIZED');
    console.log('üîß Base URL:', CAMPAY_BASE_URL);
    console.log('üîß Username:', CAMPAY_USERNAME ? 'SET ‚úÖ' : 'MISSING ‚ùå');
    console.log('üîß Password:', CAMPAY_PASSWORD ? 'SET ‚úÖ' : 'MISSING ‚ùå');
    console.log('üîß ========================================');
  }

  // ============================================
  // OBTENIR LE TOKEN D'AUTHENTIFICATION
  // ============================================
  async getToken() {
    try {
      // V√©rifier si le token existe et est valide
      if (this.token && this.tokenExpiry && Date.now() < this.tokenExpiry) {
        console.log('‚úÖ Using cached token');
        return this.token;
      }

      console.log('üîê Getting CamPay authentication token...');
      console.log('üì° POST', `${CAMPAY_BASE_URL}/token/`);

      const response = await axios.post(
        `${CAMPAY_BASE_URL}/token/`,
        {
          username: CAMPAY_USERNAME,
          password: CAMPAY_PASSWORD
        },
        {
          headers: {
            'Content-Type': 'application/json'
          },
          timeout: 30000 // 30 secondes
        }
      );

      this.token = response.data.token;
      // Token valide pendant 1 heure (3600 secondes)
      this.tokenExpiry = Date.now() + (3600 * 1000);

      console.log('‚úÖ CamPay token obtained successfully');
      console.log('‚úÖ Token:', this.token.substring(0, 20) + '...');
      return this.token;

    } catch (error) {
      console.error('‚ùå ========================================');
      console.error('‚ùå ERROR GETTING CAMPAY TOKEN');
      console.error('‚ùå URL:', `${CAMPAY_BASE_URL}/token/`);
      console.error('‚ùå Status:', error.response?.status);
      console.error('‚ùå Status Text:', error.response?.statusText);
      console.error('‚ùå Error Data:', JSON.stringify(error.response?.data, null, 2));
      console.error('‚ùå Error Message:', error.message);
      console.error('‚ùå ========================================');
      throw new Error('Failed to authenticate with CamPay: ' + (error.response?.data?.message || error.message));
    }
  }

  // ============================================
  // INITIER UN PAIEMENT MOBILE MONEY
  // ============================================
  async initiatePayment(paymentData) {
    try {
      console.log('üí≥ ========================================');
      console.log('üí≥ INITIATING CAMPAY PAYMENT');
      console.log('üí≥ Amount:', paymentData.amount, 'XAF');
      console.log('üí≥ Phone:', paymentData.phone_number);
      console.log('üí≥ Reference:', paymentData.external_reference);
      console.log('üí≥ ========================================');

      const token = await this.getToken();

      console.log('üì° POST', `${CAMPAY_BASE_URL}/collect/`);

      const response = await axios.post(
        `${CAMPAY_BASE_URL}/collect/`,
        {
          amount: paymentData.amount.toString(),
          currency: 'XAF',
          from: paymentData.phone_number,
          description: paymentData.description || 'Vide Grenier Kamer - Purchase',
          external_reference: paymentData.external_reference,
          external_user: paymentData.external_user || '',
        },
        {
          headers: {
            'Authorization': `Token ${token}`,
            'Content-Type': 'application/json'
          },
          timeout: 30000 // 30 secondes
        }
      );

      console.log('‚úÖ ========================================');
      console.log('‚úÖ CAMPAY PAYMENT INITIATED');
      console.log('‚úÖ Reference:', response.data.reference);
      console.log('‚úÖ Status:', response.data.status);
      console.log('‚úÖ USSD Code:', response.data.ussd_code);
      console.log('‚úÖ Operator:', response.data.operator);
      console.log('‚úÖ Full Response:', JSON.stringify(response.data, null, 2));
      console.log('‚úÖ ========================================');
      
      return {
        success: true,
        reference: response.data.reference,
        status: response.data.status,
        ussd_code: response.data.ussd_code,
        operator: response.data.operator,
        data: response.data
      };

    } catch (error) {
      console.error('‚ùå ========================================');
      console.error('‚ùå ERROR INITIATING CAMPAY PAYMENT');
      console.error('‚ùå URL:', `${CAMPAY_BASE_URL}/collect/`);
      console.error('‚ùå Status:', error.response?.status);
      console.error('‚ùå Status Text:', error.response?.statusText);
      console.error('‚ùå Error Data:', JSON.stringify(error.response?.data, null, 2));
      console.error('‚ùå Error Message:', error.message);
      console.error('‚ùå ========================================');
      
      return {
        success: false,
        error: error.response?.data?.message || 'Payment initiation failed',
        details: error.response?.data
      };
    }
  }

  // ============================================
  // V√âRIFIER LE STATUT D'UN PAIEMENT
  // ============================================
  async checkPaymentStatus(reference) {
    try {
      console.log('üîç ========================================');
      console.log('üîç CHECKING PAYMENT STATUS');
      console.log('üîç Reference:', reference);
      console.log('üîç ========================================');

      const token = await this.getToken();

      console.log('üì° GET', `${CAMPAY_BASE_URL}/transaction/${reference}/`);

      const response = await axios.get(
        `${CAMPAY_BASE_URL}/transaction/${reference}/`,
        {
          headers: {
            'Authorization': `Token ${token}`,
            'Content-Type': 'application/json'
          },
          timeout: 30000
        }
      );

      console.log('üìä ========================================');
      console.log('üìä PAYMENT STATUS RETRIEVED');
      console.log('üìä Status:', response.data.status);
      console.log('üìä Amount:', response.data.amount);
      console.log('üìä Operator:', response.data.operator);
      console.log('üìä Full Response:', JSON.stringify(response.data, null, 2));
      console.log('üìä ========================================');

      return {
        success: true,
        status: response.data.status,
        reference: response.data.reference,
        amount: response.data.amount,
        operator: response.data.operator,
        data: response.data
      };

    } catch (error) {
      console.error('‚ùå ========================================');
      console.error('‚ùå ERROR CHECKING PAYMENT STATUS');
      console.error('‚ùå Reference:', reference);
      console.error('‚ùå Status:', error.response?.status);
      console.error('‚ùå Error Data:', JSON.stringify(error.response?.data, null, 2));
      console.error('‚ùå ========================================');
      
      return {
        success: false,
        error: 'Failed to check payment status',
        details: error.response?.data
      };
    }
  }

  // ============================================
  // V√âRIFIER LA SIGNATURE DU WEBHOOK
  // ============================================
  verifyWebhookSignature(payload, signature) {
    const crypto = require('crypto');
    const webhookSecret = process.env.CAMPAY_WEBHOOK_SECRET;

    if (!webhookSecret) {
      console.error('‚ùå CAMPAY_WEBHOOK_SECRET not configured');
      return false;
    }

    const computedSignature = crypto
      .createHmac('sha256', webhookSecret)
      .update(JSON.stringify(payload))
      .digest('hex');

    const isValid = computedSignature === signature;
    console.log('üîê Webhook signature verification:', isValid ? 'VALID ‚úÖ' : 'INVALID ‚ùå');
    
    return isValid;
  }
}

module.exports = new CamPayService();